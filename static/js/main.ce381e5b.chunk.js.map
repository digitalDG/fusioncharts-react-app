{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReactFC","fcRoot","FusionCharts","Column2D","FusionTheme","chartConfigs","type","width","height","dataFormat","dataSource","chart","caption","subCaption","xAxisName","yAxisName","numberSuffix","theme","data","label","value","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAgBAA,IAAQC,OAAOC,IAAcC,IAAUC,KAIvC,IAqCMC,EAAe,CACnBC,KAAM,WACNC,MAAO,MACPC,OAAQ,MACRC,WAAY,OACZC,WAAY,CAEVC,MAAO,CACLC,QAAS,6CACTC,WAAY,iCACZC,UAAW,UACXC,UAAW,mBACXC,aAAc,IACdC,MAAO,UAGTC,KArDc,CAChB,CACEC,MAAO,YACPC,MAAO,OAET,CACED,MAAO,QACPC,MAAO,OAET,CACED,MAAO,SACPC,MAAO,OAET,CACED,MAAO,OACPC,MAAO,OAET,CACED,MAAO,SACPC,MAAO,OAET,CACED,MAAO,MACPC,MAAO,OAET,CACED,MAAO,KACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,SAuCIC,E,iLAXX,OACE,yBAAKC,UAAU,OACb,wBAAIA,UAAU,aAAd,kCACA,yBAAKA,UAAU,aACb,kBAAC,IAAYjB,S,GANLkB,aCjEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ce381e5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// Include the react-fusioncharts component\nimport ReactFC from 'react-fusioncharts';\n\n// Include the fusioncharts library\nimport FusionCharts from 'fusioncharts';\n\n// Include the chart type\nimport Column2D from 'fusioncharts/fusioncharts.charts';\n\n// Include the theme as fusion\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\n// Adding the chart and theme as dependency to the core fusioncharts*\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n\n\n// Preparing the chart data\nconst chartData = [\n  {\n    label: \"Venezuela\",\n    value: \"290\"\n  },\n  {\n    label: \"Saudi\",\n    value: \"260\"\n  },\n  {\n    label: \"Canada\",\n    value: \"180\"\n  },\n  {\n    label: \"Iran\",\n    value: \"140\"\n  },\n  {\n    label: \"Russia\",\n    value: \"115\"\n  },\n  {\n    label: \"UAE\",\n    value: \"100\"\n  },\n  {\n    label: \"US\",\n    value: \"30\"\n  },\n  {\n    label: \"China\",\n    value: \"30\"\n  }\n];\n\n\n// Create a JSON object to store the chart configurations\nconst chartConfigs = {\n  type: \"column2d\", // The chart type\n  width: \"700\", // Width of the chart\n  height: \"400\", // Height of the chart\n  dataFormat: \"json\", // Data type\n  dataSource: {\n    // Chart Configuration\n    chart: {\n      caption: \"Countries With Most Oil Reserves [2017-18]\",\n      subCaption: \"In MMbbl = One Million barrels\",\n      xAxisName: \"Country\",\n      yAxisName: \"Reserves (MMbbl)\",\n      numberSuffix: \"K\",\n      theme: \"fusion\"\n    },\n    // Chart Data - from step 2\n    data: chartData\n  }\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"AppHeader\">Sample Fusion Charts React App</h1>\n        <div className=\"container\">\n          <ReactFC {...chartConfigs} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}